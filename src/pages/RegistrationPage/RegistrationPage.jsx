// –§–∞–π–ª: frontend/src/pages/RegistrationPage/RegistrationPage.jsx
import React, { useState } from 'react';
import styles from './RegistrationPage.module.scss';
import { Link, useNavigate } from 'react-router-dom'; // –î–æ–±–∞–≤–ª—è–µ–º useNavigate
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ auth.js
import { registerUser } from '../../api/auth';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faCheckCircle, faCircleXmark } from '@fortawesome/free-solid-svg-icons';
import GoogleLoginButton from './../../components/GoogleLoginButton';


function RegistrationPage() {
    const navigate = useNavigate(); // –•—É–∫ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const [showPassword, setShowPassword] = useState(false);
    const [showRepeat, setShowRepeat] = useState(false);
    
    const [formData, setFormData] = useState({
      username: '',
      password: '',
      repeatPassword: '',
      email: '',
      fullName: '',
    });
   
        

  const [errorMessage, setErrorMessage] = useState('');
  const [successMessage, setSuccessMessage] = useState('');
  const [loading, setLoading] = useState(false); // <-- —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã (–¥–µ–º–æ)
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
    const handleSubmit = async (e) => {
      e.preventDefault();
    
      // –°–±—Ä–æ—Å–∏–º –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
      setErrorMessage('');
      setSuccessMessage('');
    
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è (–±–µ–∑ fullName)
      if (
        !formData.username ||
        !formData.password ||
        !formData.email ||
        !formData.repeatPassword
      ) {
        setErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.');
        return;
      }
    
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
      if (formData.password !== formData.repeatPassword) {
        setErrorMessage("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
        return;
      }
    
      try {
        setLoading(true);
    
        const response = await registerUser({
          username: formData.username,
          password: formData.password,
          email: formData.email,
          fullName: formData.fullName,
        });
    
        console.log('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
    
        setFormData({
          username: '',
          password: '',
          repeatPassword: '',
          email: '',
          fullName: '',
        });
    
        setSuccessMessage('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
        setErrorMessage('');
    
        setTimeout(() => {
          navigate('/login');
        }, 1500);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    
        if (error.response && error.response.data) {
          setErrorMessage(error.response.data.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        } else {
          setErrorMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        }
      } finally {
        setLoading(false);
      }
    };
    
    

  return (
    <div className={styles.registrationPage}>
         <div className={styles.succesCenter}>
                  {/* –£—Å–ø–µ—Ö */}


         </div>


      <div className={styles.container}>
        <h1 className={styles.title}>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h1>

        <form className={styles.form} onSubmit={handleSubmit}>
  <h2 className={styles.heading}>Create account</h2>

  {errorMessage && (
    <div className={styles.errorMessage}>
      <FontAwesomeIcon icon={faCircleXmark} className={styles.errorIcon} />
      <span>{errorMessage}</span>
    </div>
  )}

  {successMessage && (
    <div className={styles.successMessage}>
      <FontAwesomeIcon icon={faCheckCircle} className={styles.successIcon} />
      <span>{successMessage}</span>
    </div>
  )}

  {/* Username + Full Name –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ */}
  <div className={styles.nameRow}>
    <div className={styles.formGroup}>
      <label>Username</label>
      <input
        type="text"
        name="username"
        value={formData.username}
        onChange={handleChange}
        placeholder="Input Text"
      />
    </div>

    <div className={styles.formGroup}>
      <label>Full name (optional)</label>
      <input
        type="text"
        name="fullName"
        value={formData.fullName}
        onChange={handleChange}
        placeholder="Optional"
      />
    </div>
  </div>

  <div className={styles.formGroup}>
    <label>Email</label>
    <input
      type="email"
      name="email"
      value={formData.email}
      onChange={handleChange}
      placeholder="Input Text"
    />
  </div>

  <div className={styles.formGroup}>
    <label>Password</label>
    <div className={styles.passwordWrapper}>
      <input
        type={showPassword ? "text" : "password"}
        name="password"
        value={formData.password}
        onChange={handleChange}
        placeholder="Password"
      />
      <button
        type="button"
        className={styles.eyeIcon}
        onClick={() => setShowPassword((prev) => !prev)}
      >
        {showPassword ? "üôà" : "üëÅÔ∏è"}
      </button>
    </div>
  </div>

  <div className={styles.formGroup}>
    <label>Repeat password</label>
    <div className={styles.passwordWrapper}>
      <input
        type={showRepeat ? "text" : "password"}
        name="repeatPassword"
        value={formData.repeatPassword}
        onChange={handleChange}
        placeholder="Repeat password"
      />
      <button
        type="button"
        className={styles.eyeIcon}
        onClick={() => setShowRepeat((prev) => !prev)}
      >
        {showRepeat ? "üôà" : "üëÅÔ∏è"}
      </button>
    </div>
  </div>

  <button type="submit" className={styles.submitBtn}>
    Create account
  </button>

  <p className={styles.terms}>
    By clicking the 'Sign Up' button, you confirm that you accept our{' '}
    <Link to="#">Terms of Use</Link> and <Link to="#">Privacy Policy</Link>.
  </p>

  <hr className={styles.divider} />

  <div className={styles.bottomLink}>
    Have an account? <Link to="/login">Log In</Link>
  </div>
  <GoogleLoginButton />
</form>



      </div>
    </div>
  );
}

export default RegistrationPage;
