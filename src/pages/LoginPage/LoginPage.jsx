// –§–∞–π–ª: frontend/src/pages/LoginPage/LoginPage.jsx
import React, { useState } from 'react';
import { Link, useNavigate, useSearchParams } from 'react-router-dom';
import styles from './LoginPage.module.scss';
import { loginUser } from '../../api/auth'; // –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏

function LoginPage() {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();

  const redirectTo = searchParams.get("redirectTo") || "/";
  

  
  const [formData, setFormData] = useState({
    username: '',
    password: '',
  });
  const [showPassword, setShowPassword] = useState(false);
  
  const [errorMessage, setErrorMessage] = useState('');
  const [successMessage, setSuccessMessage] = useState('');
  const [loading, setLoading] = useState(false);  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
  const handleSubmit = async (e) => {
    e.preventDefault();

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∏ —É—Å–ø–µ—Ö
    setErrorMessage('');
    setSuccessMessage('');

    if (!formData.username || !formData.password) {
      setErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å.');
      return;
    }

    try {
      setLoading(true);

      // –ó–∞–ø—Ä–æ—Å –∫ API
      const response = await loginUser({
        username: formData.username,
        password: formData.password,
      });

      console.log('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);

      // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { token: '...' } 
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º token –≤ localStorage
      if (response.token) {
        localStorage.setItem('token', response.token);
      }
      localStorage.setItem('username', formData.username);
      setSuccessMessage('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      setFormData({ username: '', password: '' });

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –≥–ª–∞–≤–Ω—É—é –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
      setTimeout(() => {
        navigate(redirectTo, { replace: true });

      }, 100);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
      if (error.response && error.response.data) {
        setErrorMessage(error.response.data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ');
      } else {
        setErrorMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={styles.loginPage}>


{loading && (
            <div className={styles.loadingOverlay}>
              <div className={styles.spinner}></div>
            </div>
          )}



      <div className={styles.container}>
        <h1 className={styles.title}></h1>

        <form className={styles.form} onSubmit={handleSubmit}>
  <h2 className={styles.heading}>Log in</h2>

  <div className={styles.formGroup}>
    <label htmlFor="username">Username</label>
    <input
      type="text"
      name="username"
      id="username"
      value={formData.username}
      onChange={handleChange}
      placeholder="Input Text"
    />
  </div>

  <div className={styles.formGroup}>
    <label htmlFor="password">Password</label>
    <div className={styles.passwordWrapper}>
      <input
      type={showPassword ? "text" : "password"}
      name="password"
        id="password"
        value={formData.password}
        onChange={handleChange}
        placeholder="Input Text"
      />
       <button
      type="button"
      className={styles.eyeIcon}
      onClick={() => setShowPassword((prev) => !prev)}
      aria-label="–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å"
    >
      {showPassword ? "üôà" : "üëÅÔ∏è"}
    </button>
    </div>
  </div>
  {errorMessage && (
  <div className={styles.errorMessage}>
    {errorMessage}
  </div>
)}
  <div className={styles.row}>
    <label className={styles.checkbox}>
      <input type="checkbox" />
      <span>Remember me</span>
    </label>
    <Link to="/forgot-password" className={styles.forgotPassword}>
      Forgot Password
    </Link>
  </div>

  <button type="submit" className={styles.loginBtn}>Login</button>

  <hr className={styles.divider} />

  <div className={styles.signupLink}>
    Have an account? <Link to="/register">Sign up</Link>
  </div>
</form>

      </div>
    </div>
  );
}

export default LoginPage;
